esphome:
  name: air-monitor
  friendly_name: Air Monitor

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true  # Optimized for static SSID/password setup

captive_portal:

# SPI interface for the TFT display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

# Display configuration for TTGO T-Display ESP32

display:
  - platform: st7789v
    model: "TTGO_TDISPLAY_135X240"
    reset_pin: GPIO23
    cs_pin: GPIO5
    dc_pin: GPIO16
    rotation: 90
    lambda: |-
      int co2 = (int)id(mhz19_co2).state;
      Color bg = Color(34, 139, 34);    // Default: Forest Green
      Color fg = Color(255, 255, 255);  // Default: White

      if (co2 >= 800 && co2 < 1200) {
        bg = Color(255, 255, 0);        // Warning: Yellow
        fg = Color(0, 0, 0);            // Text: Black
      } else if (co2 >= 1200 && co2 <= 10000) {
        bg = Color(255, 0, 0);          // Critical: Red
      } else if (co2 > 10000) {
        bg = Color(0, 0, 0);            // Text: Black
        Color fg = Color(255, 255, 255);  // Default: White
        it.printf(it.get_width() / 2, 40, id(font_large), fg, TextAlign::CENTER, "Initializing");
        return;
      }

      // Display background and readings
      it.filled_rectangle(0, 0, it.get_width(), it.get_height(), bg);
      it.printf(it.get_width() / 2, 40, id(font_large), fg, TextAlign::CENTER, "%d ppm", co2);

      // Display status message
      if (co2 >= 1200) {
        it.printf(it.get_width() / 2, 120, id(font_large), fg, TextAlign::CENTER, "Critical Level!");
      } else if (co2 >= 800) {
        it.printf(it.get_width() / 2, 120, id(font_large), fg, TextAlign::CENTER, "Elevated CO2");
      } else {
        it.printf(it.get_width() / 2, 120, id(font_large), fg, TextAlign::CENTER, "Normal Air Quality");
      }

# Fonts for display
font:
  - file: "arial.ttf"
    id: font_large
    size: 24
  - file: "arial.ttf"
    id: font_small
    size: 16

# GPIO button configuration
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
    name: "Button 1"
    on_press:
      - logger.log: "Button 1 pressed!"

# UART configuration for MH-Z19 sensor
uart:
  tx_pin: GPIO26
  rx_pin: GPIO27
  baud_rate: 9600

# MH-Z19 CO2 sensor configuration
sensor:
  - platform: mhz19
    co2:
      name: "MH-Z19 CO2"
      id: mhz19_co2
    update_interval: 60s
    automatic_baseline_calibration: false

  # WiFi signal strength sensor
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s

# Manual calibration switch for MH-Z19
switch:
  - platform: template
    name: "MH-Z19 Manual Calibration"
    turn_on_action:
      - uart.write: "\xFF\x01\x87\x00\x00\x00\x00\x00\x78"